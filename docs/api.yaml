openapi: '3.0.0'
info:
  version: 1.0.0
  title: lindeb
  license:
    name: GPLv3
    url: https://www.gnu.org/licenses/gpl-3.0.en.html
servers:
- url: https://lindeb.maunium.net/api
tags:
- name: Links
  description: Methods to browse and managelinks.
- name: Authentication
  description: Methods to manage authentication.
- name: Tags
  description: Methods to list and manage tags.
paths:
  /tags:
    get:
      summary: Get all tags.
      operationId: getTags
      tags: [ Tags ]
      parameters:
      - name: tag
        in: query
        description: The list of tags to get. If not given, all tags will be returned.
        schema:
          type: array
          items:
            type: string
      responses:
        200:
          description: Tags fetched.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tag'
        401:
          $ref: '#/components/responses/Unauthorized'
  /tag/add:
    post:
      summary: Add a new tag.
      operationId: addTag
      tags: [ Tags ]
      responses:
        201:
          description: Tag created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        409:
          description: Tag with given name already exists.
        401:
          $ref: '#/components/responses/Unauthorized'
  /tag/{id}:
    parameters:
    - name: id
      in: path
      description: The ID of the tag to access.
      schema:
        type: integer
    get:
      summary: Get all the details about the tag with the given ID.
      operationId: getTag
      tags: [ Tags ]
      parameters:
      - name: include-links
        in: query
        description: Whether or not to include all links that have the tag.
        schema:
          type: boolean
          default: false
      responses:
        200:
          description: Tag found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        404:
          description: Tag not found.
        401:
          $ref: '#/components/responses/Unauthorized'
    put:
      summary: Edit the tag.
      operationId: editTag
      tags: [ Tags ]
      requestBody:
        description: The updated tag.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tag'
      responses:
        200:
          description: Tag updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        404:
          description: Tag not found.
        409:
          description: Tag with given name already exists.
        401:
          $ref: '#/components/responses/Unauthorized'
    delete:
      summary: Delete the tag.
      operationId: deleteTag
      tags: [ Tags ]
      parameters:
      - name: delete-links
        in: query
        description: Whether or not to delete all links that have the tag. If false, the links will remain without the tag.
        schema:
          type: boolean
          default: false
      responses:
        204:
          description: Tag deleted.
        404:
          description: Tag not found.
        401:
          $ref: '#/components/responses/Unauthorized'
  /link/save:
    post:
      summary: Store a new link in the database.
      operationId: addLink
      tags: [ Links ]
      requestBody:
        description: The link to save.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Link'
      responses:
        201:
          description: Link saved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Link'
        401:
          $ref: '#/components/responses/Unauthorized'
  /link/{id}:
    parameters:
    - name: id
      in: path
      description: The ID of the link to access.
      schema:
        type: integer
    get:
      summary: Get all the details about the link with the given ID.
      operationId: getLink
      tags: [ Links ]
      responses:
        200:
          description: Link found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Link'
        404:
          description: Link not found.
        401:
          $ref: '#/components/responses/Unauthorized'
    delete:
      summary: Delete a link from the database.
      operationId: deleteLink
      tags: [ Links ]
      responses:
        204:
          description: Link deleted.
        404:
          description: Link not found.
        401:
          $ref: '#/components/responses/Unauthorized'
    put:
      summary: Update the metadata of a link.
      operationId: updateLink
      tags: [ Links ]
      responses:
        200:
          description: Link edited.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Link'
        404:
          description: Link not found.
        401:
          $ref: '#/components/responses/Unauthorized'
  /links:
    get:
      summary: List or search for links with optional pagination and filtering.
      operationId: getLinks
      tags: [ Links ]
      parameters:
      - $ref: '#/components/parameters/PageNumber'
      - $ref: '#/components/parameters/PageSize'
      - name: search
        in: query
        description: The search query.
        schema:
          type: string
          example: "lindeb api"
      - name: tag
        in: query
        description: The tag or list of tags that the search should be limited to.
        schema:
          type: array
          items:
            type: string
      - name: exclusivetags
        in: query
        description: Whether or not filtering by multiple tags should only show links with all the tags.
        schema:
          type: boolean
          default: false
      - name: domain
        in: query
        description: The domain or list of domains that the search should be limited to.
        schema:
          type: array
          items:
            type: string
      responses:
        200:
          description: Links fetched.
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalCount:
                    type: integer
                    description: If pagination is enabled, the number of links in total with the given filters.
                  links:
                    type: array
                    items:
                      $ref: '#/components/schemas/Link'
        401:
          $ref: '#/components/responses/Unauthorized'

  /auth/login:
    post:
      summary: Sign in to the application.
      operationId: login
      tags: [ Authentication ]
      security: []
      requestBody:
        description: User credentials
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCredentials'
      responses:
        200:
          description: Signed in successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        403:
          description: A lindeb authorization header was sent with the request.
        401:
          description: Invalid username or password.
  /auth/logout:
    post:
      summary: Sign out of the application.
      operationId: logout
      tags: [ Authentication ]
      responses:
        200:
          description: Signed out successfully.
        401:
          description: User was not signed in.
  /auth/update:
    post:
      summary: Update authentication information
      operationId: updateUser
      tags: [ Authentication ]
      requestBody:
        description: User info update data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        200:
          description: User info updated successfully.
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          description: Current password is incorrect.
  /auth/register:
    post:
      summary: Sign up to the application
      operationId: register
      tags: [ Authentication ]
      security: []
      requestBody:
        description: User info
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCredentials'
      responses:
        201:
          description: Registration successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        403:
          description: A lindeb authorization header was sent with the request.
        409:
          description: Username is taken.

security:
- AuthToken: []

components:
  securitySchemes:
    AuthToken:
      type: http
      description: |
        Authentication token. Sent in the Authorization HTTP header with
        `LINDEB-TOKEN user=<user ID> token=<token>` as the value.
      scheme: LINDEB-TOKEN
  responses:
    Unauthorized:
      description: The user is not signed in.
  parameters:
    PageNumber:
      name: page
      in: query
      description: Enable the optional pagination and get the page of the given number.
      schema:
        type: integer
        example: 5
    PageSize:
      name: pagesize
      in: query
      description: If pagination is enabled, the size of one page. Defaults to 10.
      schema:
        type: integer
        default: 10
        example: 10
  schemas:
    UserCredentials:
      required:
      - username
      - password
      properties:
        username:
          type: string
          maxLength: 32
          description: The login username of the user.
        password:
          type: string
          description: The password of the user.
          writeOnly: true
      example:
        username: linksaver123
        password: passw0rd!
    UserUpdate:
      required:
      - currentPassword
      properties:
        currentPassword:
          type: string
          description: The current password of the user.
          writeOnly: true
        password:
          type: string
          description: The new password of the user. If empty or not present, password will not change.
      example:
        currentPassword: passw0rd!
        password: p455w0rd!1!!1one!
    User:
      required:
      - username
      - id
      properties:
        id:
          type: integer
          description: The ID of the user.
          readOnly: true
        username:
          type: string
          maxLength: 32
          description: The login username of the user.
        authtoken:
          type: string
          minLength: 64
          maxLength: 64
          description: The authentication token returned when logging in.
          readOnly: true
      example:
        id: 123
        username: linksaver123
        authtoken: UTqIVgvyfRyYRrlEmJugTagqhyhODjDPiCwrMbXqNlPXrhJwtAOVhYAVKWDNiMgk
    Tag:
      required:
      - name
      properties:
        id:
          type: integer
          description: The ID of the tag.
          readOnly: true
        name:
          type: string
          maxLength: 32
          description: The name of the tag. Must be lowercase.
        description:
          type: string
          maxLength: 65535
          description: A short description of what is/should be tagged with the tag.
        links:
          type: array
          readOnly: true
          description: The list of links tagged with this tag. Only included when specifically requested.
          items:
            $ref: '#/components/schemas/Link'
      example:
        id: 2
        name: openapi
        description: API specs that may be useful
    Link:
      required:
      - url
      properties:
        id:
          type: integer
          description: The ID of the link.
          readOnly: true
        domain:
          type: string
          maxLength: 255
          description: The domain part of the URL.
          readOnly: true
        url:
          type: string
          maxLength: 2047
          description: The URL itself.
        title:
          type: string
          maxLength: 255
          description: The title of the page the URL links to.
        description:
          type: string
          maxLength: 65535
          description: A short description of the page the URL links to.
        tags:
          type: array
          description: The tags of this link.
          items:
            type: string
            maxLength: 32
      example:
        id: 293
        url: https://github.com/tulir/lindeb/blob/master/docs/api.yaml
        title: lindeb/api.yaml at master · tulir/lindeb
        description: lindeb - A database execise project with Go and React
        tags:
        - github
        - openapi
